{
  "info": {
    "name": "Comments API - Feature Tests",
    "description": "Тесты для функциональности комментариев к событиям",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "base_url",
      "value": "http://localhost:8080",
      "type": "string"
    },
    {
      "key": "user_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "event_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "category_id",
      "value": "",
      "type": "string"
    },
    {
      "key": "created_comment_id",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "Создание среды для тестов",
      "item": [
        {
          "name": "Создать категорию",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Концерты\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/categories",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "admin",
                "categories"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Category created - Status 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Save category ID\", function () {",
                  "    const category = pm.response.json();",
                  "    pm.expect(category).to.have.property('id');",
                  "    pm.collectionVariables.set(\"category_id\", category.id);",
                  "    console.log(\"Created category with ID: \" + category.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Создать пользователя",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"name\": \"Test User\",\n  \"email\": \"testuser@mail.ru\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/users",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "admin",
                "users"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"User created - Status 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Save user ID\", function () {",
                  "    const user = pm.response.json();",
                  "    pm.expect(user).to.have.property('id');",
                  "    pm.collectionVariables.set(\"user_id\", user.id);",
                  "    console.log(\"Created user with ID: \" + user.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Создать событие",
          "event": [
            {
              "listen": "prerequest",
              "script": {
                "exec": [
                  "// Создаём дату на 5 дней вперёд",
                  "let now = new Date();",
                  "now.setDate(now.getDate() + 5);",
                  "let formatted = now.toISOString().slice(0,19).replace('T',' ');",
                  "pm.variables.set('future_event_date', formatted);",
                  "console.log('Сгенерирована будущая дата события:', formatted);"
                ]
              }
            },
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test('✅ Event created - Status 201', function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test('✅ Save event ID', function () {",
                  "    const event = pm.response.json();",
                  "    pm.expect(event).to.have.property('id');",
                  "    pm.collectionVariables.set('event_id', event.id);",
                  "    console.log('Created event with ID: ' + event.id);",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"title\": \"Тестовое событие для комментариев\",\n  \"annotation\": \"Это тестовое событие для проверки функциональности комментариев\",\n  \"category\": {{category_id}},\n  \"description\": \"Подробное описание тестового события для проверки работы комментариев в системе\",\n  \"eventDate\": \"{{future_event_date}}\",\n  \"paid\": false,\n  \"participantLimit\": 100,\n  \"requestModeration\": true,\n  \"location\": {\n    \"lat\": 55.7558,\n    \"lon\": 37.6173\n  }\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/events",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{user_id}}",
                "events"
              ]
            }
          },
          "response": []
        },
        {
          "name": "Опубликовать событие",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"stateAction\": \"PUBLISH_EVENT\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/admin/events/{{event_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "admin",
                "events",
                "{{event_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Event published - Status 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Event state is PUBLISHED\", function () {",
                  "    const event = pm.response.json();",
                  "    pm.expect(event.state).to.equal(\"PUBLISHED\");",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "Тесты функциональности комментариев",
      "item": [
        {
          "name": "Создать комментарий",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Тестовый комментарий для события\",\n  \"eventId\": {{event_id}}\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/comments",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{user_id}}",
                "comments"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Comment created - Status 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Comment created successfully\", function () {",
                  "    const comment = pm.response.json();",
                  "    pm.expect(comment.text).to.equal(\"Тестовый комментарий для события\");",
                  "    pm.expect(comment).to.have.property('id');",
                  "    pm.expect(comment).to.have.property('created');",
                  "    pm.expect(comment.user.id).to.equal(parseInt(pm.collectionVariables.get(\"user_id\")));",
                  "    ",
                  "    pm.collectionVariables.set(\"created_comment_id\", comment.id);",
                  "    console.log(\"Created comment with ID: \" + comment.id);",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Получить комментарии события",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/events/{{event_id}}/comments?from=0&size=10",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "events",
                "{{event_id}}",
                "comments"
              ],
              "query": [
                {
                  "key": "from",
                  "value": "0"
                },
                {
                  "key": "size",
                  "value": "10"
                }
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Comments array returned\", function () {",
                  "    const comments = pm.response.json();",
                  "    pm.expect(comments).to.be.an('array');",
                  "    pm.expect(comments.length).to.be.at.least(1);",
                  "});",
                  "",
                  "pm.test(\"Our comment is in the list\", function () {",
                  "    const comments = pm.response.json();",
                  "    const ourComment = comments.find(c => c.id === parseInt(pm.collectionVariables.get(\"created_comment_id\")));",
                  "    pm.expect(ourComment).to.exist;",
                  "    pm.expect(ourComment.text).to.equal(\"Тестовый комментарий для события\");",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Получить комментарий по ID",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url}}/comments/{{created_comment_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "comments",
                "{{created_comment_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Correct comment returned\", function () {",
                  "    const comment = pm.response.json();",
                  "    pm.expect(comment.id).to.equal(parseInt(pm.collectionVariables.get(\"created_comment_id\")));",
                  "    pm.expect(comment.text).to.equal(\"Тестовый комментарий для события\");",
                  "    pm.expect(comment.eventId).to.equal(parseInt(pm.collectionVariables.get(\"event_id\")));",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Обновить комментарий",
          "request": {
            "method": "PATCH",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"text\": \"Обновленный текст комментария\"\n}"
            },
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/comments/{{created_comment_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{user_id}}",
                "comments",
                "{{created_comment_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Comment updated successfully\", function () {",
                  "    const comment = pm.response.json();",
                  "    pm.expect(comment.text).to.equal(\"Обновленный текст комментария\");",
                  "    pm.expect(comment).to.have.property('edited');",
                  "    pm.expect(comment.edited).to.be.true;",
                  "});"
                ]
              }
            }
          ]
        },
        {
          "name": "Удалить комментарий",
          "request": {
            "method": "DELETE",
            "header": [],
            "url": {
              "raw": "{{base_url}}/users/{{user_id}}/comments/{{created_comment_id}}",
              "host": [
                "{{base_url}}"
              ],
              "path": [
                "users",
                "{{user_id}}",
                "comments",
                "{{created_comment_id}}"
              ]
            }
          },
          "response": [],
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 204\", function () {",
                  "    pm.response.to.have.status(204);",
                  "});"
                ]
              }
            }
          ]
        }
      ]
    }
  ]
}